name: "Tests"
on: [push, pull_request]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.6, 3.7, 3.8]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          wget -qO- https://deb.opera.com/archive.key | sudo apt-key add -
          sudo add-apt-repository "deb [arch=i386,amd64] https://deb.opera.com/opera-stable/ stable non-free"
          sudo apt-get update
          sudo apt-get install chromium-browser
          sudo apt-get -y --no-install-recommends install opera-stable
          opera --version

      - name: Install Python dependencies
        run: |
          python -m pip install -U pip
          pip install pipenv
          pipenv install --dev
      - name: Run tests with xvfb
        uses: GabrielBB/xvfb-action@v1.0
        with:
          run: pipenv run py.test -sv --cov-config .coveragerc --cov-report xml --cov-report term:skip-covered --cov=webdriver_manager --tb=short tests/
      - name: Codecov Upload
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          name: ${{ matrix.os }}-py${{ matrix.python-version }}

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    needs: test
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install Python dependencies
        run: |
          python -m pip install -U pip
          pip install pipenv
          pipenv install --dev
      - name: Build dist
        run: |
          pipenv run python setup.py sdist bdist_wheel

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
